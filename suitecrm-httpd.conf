###############################################################################
#
# DO NOT EDIT THIS FILE
#
# Use the "SuiteCRM" macro to define instances as needed in other
# configuration files.
#
###############################################################################

# Define a SuiteCRM instance
#
# Use this within a server config or virtual host context to define a
# SuiteCRM instance %{instance} (matching the systemd instance name)
# for a URL location %{location}
#
<Macro SuiteCRM %{instance} %{location}>

    # Define URL aliases
    #
    Alias %{location}/cache/index.php /usr/share/suitecrm/code/index.php
    Alias %{location}/cache /var/cache/suitecrm/%{instance}/cache
    Alias %{location}/install/status.json \
          /var/lib/suitecrm/%{instance}/install/status.json
    Alias %{location} /usr/share/suitecrm/code

    # Define php-fpm proxy
    #
    <Proxy unix:/run/suitecrm/%{instance}/php-fpm.sock|fcgi://suitecrm-%{instance}>
        ProxySet timeout=300
    </Proxy>

    # Process .php files via php-fpm
    #
    <LocationMatch %{location}.*\.php(/.*)?$>
        SetHandler proxy:fcgi://suitecrm-%{instance}
    </LocationMatch>

</Macro>

# SuiteCRM code directory
#
# There is no user data within this directory.  Everything within this
# directory is, by definition, public knowledge.  The only possible
# harm arises from the execution of PHP files that are not expecting
# to be invoked directly and that do not guard against their direct
# invocation.
#
# It is unsurprisingly difficult to determine which PHP files are
# expecting to act as entry points.  There is a 'sugarEntry' constant
# that is checked for by include/entryPoint.php, but this is also
# defined by code that expects to be invoked only as a server-side
# command-line tool.
#
# There is the .htaccess file generated by the installer but this is a
# chaotic mess, clearly fails to cover large numbers of non-web entry
# points, and makes the fundamental error of attempting to enumerate
# all forms of potential badness rather than simply defining what is
# to be allowed.
#
# Searching through source code and server logs suggests that the only
# used entry points are:
#
# - index.php
# - install.php
# - service/*/rest.php
# - service/*/soap.php
# - themes/SuiteP/css/colourSelector.php
# - include/social/get_feed_data.php
#
# We choose a mechanism in which files must be explicitly marked as
# entry points by having a matching ".entrypoint" symlink created.
# The contents of the ".entrypoint" symlink are ignored; only its
# existence is verified.
#
# We set "Options None" which already prevents the entrypoint symlinks
# from being followed if requested directly.
#
# This mechanism allows packages providing add-on modules to also
# define additional entry points, without needing to modify or extend
# the Apache configuration.
#
<Directory /usr/share/suitecrm/code>

    # Grant access by default, matching the SuiteCRM .htaccess file
    #
    AllowOverride None
    Options None
    Require all granted

    # Restrict PHP access to only permitted entry points (see above)
    #
    <FilesMatch \.php>
        <If "! -L '%{REQUEST_FILENAME}.entrypoint'">
            Require all denied
        </If>
    </FilesMatch>

    # Configure index
    #
    DirectoryIndex index.php

</Directory>

# SuiteCRM state directory
#
# This directory includes generated content including data and PHP
# code fragments, along with symbolic links for files (such as
# logfiles) that are held outside of SuiteCRM's usual directory.  The
# cache directory is separate; see below.
#
# Files in this directory are generally not accessed directly.  Create
# manual exceptions for those that are.
#
<Directory /var/lib/suitecrm/*>

    # Deny access by default
    #
    AllowOverride None
    Options None
    Require all denied

</Directory>

# Allow access to the installer status file
#
<Directory /var/lib/suitecrm/*/install>
    <Files status.json>
        Require all granted
    </Files>
</Directory>

# SuiteCRM cache directory
#
# This directory includes generated content including PHP code
# fragments.
#
# The SuiteCRM default generated .htaccess file blocks access to any
# .log, .php, or .tpl files within the cache directory.  Replicate
# that restriction here.
#
<Directory /var/cache/suitecrm/*/cache>

    # Grant access by default, matching the SuiteCRM .htaccess file
    #
    AllowOverride None
    Options None
    Require all granted

    # Block access to .log, .php, and .tpl files
    #
    <FilesMatch \.(log|php|tpl)$>
        Require all denied
    </FilesMatch>

</Directory>

# Block access to the diagnostics subdirectory of the cache directory
#
# The SuiteCRM default .htaccess file blocks access to the diagnostics
# subdirectory.  Replicate that restriction here.
#
<Directory /var/cache/suitecrm/*/cache/diagnostic>
    Require all denied
</Directory>
